// ===== –°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–í–û–î–û–í –î–õ–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò =====
const authTranslations = {
    en: {
        "signin": "Sign In",
        "profile": "Profile",
        "welcome": "Welcome to EcoYard!",
        "logout": "Logout",
        "login_success": "Successfully logged in!",
        "logout_success": "Successfully logged out",
        "google_login": "Sign in with Google",
        "facebook_login": "Sign in with Facebook",
        "welcome_bonus": "Welcome bonus +50 points!"
    },
    ru: {
        "signin": "–í–æ–π—Ç–∏",
        "profile": "–ü—Ä–æ—Ñ–∏–ª—å", 
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcoYard!",
        "logout": "–í—ã–π—Ç–∏",
        "login_success": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!",
        "logout_success": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥",
        "google_login": "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google",
        "facebook_login": "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Facebook",
        "welcome_bonus": "–ë–æ–Ω—É—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è +50 –æ—á–∫–æ–≤!"
    },
    kz: {
        "signin": "–ö—ñ—Ä—É",
        "profile": "–ü—Ä–æ—Ñ–∏–ª—å",
        "welcome": "EcoYard-–≥–µ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!",
        "logout": "–®—ã“ì—É",
        "login_success": "–°”ô—Ç—Ç—ñ –∫—ñ—Ä–¥—ñ!",
        "logout_success": "–°”ô—Ç—Ç—ñ —à—ã“õ—Ç—ã",
        "google_login": "Google –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä—É",
        "facebook_login": "Facebook –∞—Ä“õ—ã–ª—ã –∫—ñ—Ä—É",
        "welcome_bonus": "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑ –±–æ–Ω—É—Å—ã +50 “±–ø–∞–π!"
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ auth.js
function getAuthTranslation(key) {
    const currentLang = localStorage.getItem('selectedLanguage') || 'en';
    return authTranslations[currentLang]?.[key] || authTranslations.en[key] || key;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
function updateAuthButtonText() {
    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
    const authBtn = document.getElementById('auth-btn');
    const loginBtn = document.getElementById('login-btn');

    if (authBtn) {
        if (isLoggedIn) {
            authBtn.textContent = getAuthTranslation('profile');
        } else {
            authBtn.textContent = getAuthTranslation('signin');
        }
    }

    if (loginBtn) {
        if (isLoggedIn) {
            loginBtn.textContent = getAuthTranslation('profile');
        } else {
            loginBtn.textContent = getAuthTranslation('signin');
        }
    }
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const AUTH_KEY = 'isLoggedIn';

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
const levelSystem = {
    levels: {
        1: { points: 0, title: "Eco-Beginner", badge: "üå±", rewards: [] },
        2: { points: 100, title: "Eco-Enthusiast", badge: "‚ôªÔ∏è", rewards: ["5% discount at partners"] },
        3: { points: 300, title: "Green Warrior", badge: "üåç", rewards: ["10% discount", "Early access to events"] },
        4: { points: 600, title: "Eco-Champion", badge: "üèÜ", rewards: ["15% discount", "Special badge", "Featured on community page"] },
        5: { points: 1000, title: "Planet Guardian", badge: "üõ°Ô∏è", rewards: ["20% discount", "All previous rewards", "Community leader status"] }
    },

    achievements: {
        first_report: { name: "First Report", description: "Submit your first environmental issue", points: 25, icon: "üìù" },
        cleanup_hero: { name: "Cleanup Hero", description: "Participate in 5 cleanup events", points: 100, icon: "üßπ" },
        tree_planter: { name: "Tree Planter", description: "Plant 10 trees", points: 150, icon: "üå≥" },
        community_leader: { name: "Community Leader", description: "Verify 20 reports", points: 200, icon: "üëë" },
        eco_educator: { name: "Eco Educator", description: "Complete all eco-knowledge quizzes", points: 75, icon: "üìö" }
    },

    init() {
        this.loadUserProgress();
    },

    loadUserProgress() {
        this.userPoints = parseInt(localStorage.getItem('userPoints') || '0');
        this.userAchievements = JSON.parse(localStorage.getItem('userAchievements') || '{}');
        this.userLevel = this.calculateCurrentLevel();
    },

    calculateCurrentLevel() {
        let currentLevel = 1;
        for (const [level, data] of Object.entries(this.levels)) {
            if (this.userPoints >= data.points) {
                currentLevel = parseInt(level);
            } else {
                break;
            }
        }
        return currentLevel;
    },

    addPoints(points, action, description) {
        const oldLevel = this.userLevel;
        this.userPoints += points;
        this.userLevel = this.calculateCurrentLevel();
        
        localStorage.setItem('userPoints', this.userPoints.toString());
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.checkAchievements(action);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
        if (this.userLevel > oldLevel) {
            this.handleLevelUp(oldLevel, this.userLevel);
        }
        
        this.updateLevelDisplay();
        
        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (window.showNotification) {
            window.showNotification(`+${points} points! ${description}`, 'success');
        }
        
        return points;
    },

    checkAchievements(action) {
        const achievementKeys = {
            'REPORT_ISSUE': 'first_report',
            'ATTEND_EVENT': 'cleanup_hero',
            'PLANT_TREE': 'tree_planter',
            'VERIFY_ISSUE': 'community_leader',
            'COMPLETE_QUIZ': 'eco_educator'
        };

        const achievementKey = achievementKeys[action];
        if (achievementKey && !this.userAchievements[achievementKey]) {
            this.unlockAchievement(achievementKey);
        }
    },

    unlockAchievement(achievementKey) {
        const achievement = this.achievements[achievementKey];
        this.userAchievements[achievementKey] = {
            unlocked: true,
            unlockedAt: new Date().toISOString()
        };
        
        localStorage.setItem('userAchievements', JSON.stringify(this.userAchievements));
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        if (window.showNotification) {
            window.showNotification(
                `üéâ Achievement Unlocked: ${achievement.name} +${achievement.points} points!`,
                'success',
                5000
            );
        }
        
        // –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        this.addPoints(achievement.points, 'ACHIEVEMENT', achievement.name);
    },

    handleLevelUp(oldLevel, newLevel) {
        const newLevelData = this.levels[newLevel];
        
        if (window.showNotification) {
            window.showNotification(
                `üéä Level Up! You are now ${newLevelData.title} ${newLevelData.badge}`,
                'success',
                5000
            );

            // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã
            if (newLevelData.rewards.length > 0) {
                setTimeout(() => {
                    window.showNotification(
                        `üéÅ New Rewards: ${newLevelData.rewards.join(', ')}`,
                        'info',
                        5000
                    );
                }, 1000);
            }
        }
    },

    updateLevelDisplay() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const levelElements = document.querySelectorAll('.user-level, #user-level');
        const progressElements = document.querySelectorAll('.level-progress, #level-progress');
        
        const currentLevelData = this.levels[this.userLevel];
        const nextLevelData = this.levels[this.userLevel + 1];
        const progress = nextLevelData ? 
            ((this.userPoints - currentLevelData.points) / (nextLevelData.points - currentLevelData.points)) * 100 : 100;

        levelElements.forEach(element => {
            element.textContent = `${currentLevelData.title} ${currentLevelData.badge}`;
        });

        progressElements.forEach(element => {
            element.style.width = `${progress}%`;
            if (element.textContent) {
                element.textContent = `${Math.round(progress)}%`;
            }
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
        updatePointsDisplay();
    }
};

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info', duration = 3000) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let container = document.getElementById('notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.id = 'notifications-container';
        container.className = 'fixed top-4 right-4 z-50 space-y-2';
        document.body.appendChild(container);
    }

    const notification = document.createElement('div');
    notification.className = `notification transform transition-transform duration-300 translate-x-full ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 
        type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
    } text-white p-4 rounded-lg shadow-lg max-w-sm`;
    
    notification.innerHTML = `
        <div class="flex items-center justify-between">
            <div class="flex items-center">
                <i class="fas fa-${getNotificationIcon(type)} mr-2"></i>
                <span>${message}</span>
            </div>
            <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;

    container.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => notification.classList.remove('translate-x-full'), 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    if (duration > 0) {
        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => notification.remove(), 300);
        }, duration);
    }
    
    return notification;
}

function getNotificationIcon(type) {
    const icons = {
        success: 'check-circle',
        error: 'exclamation-triangle',
        warning: 'exclamation-circle',
        info: 'info-circle'
    };
    return icons[type] || 'info-circle';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
function updateNavigation() {
    const isLoggedIn = localStorage.getItem(AUTH_KEY) === 'true';
    const authBtn = document.getElementById('auth-btn');
    const loginBtn = document.getElementById('login-btn');

    if (authBtn) {
        if (isLoggedIn) {
            authBtn.textContent = getAuthTranslation('profile');
            authBtn.onclick = function() {
                window.location.href = 'profile.html';
            };
        } else {
            authBtn.textContent = getAuthTranslation('signin');
            authBtn.onclick = function() {
                openLoginModal();
            };
        }
    }

    if (loginBtn) {
        if (isLoggedIn) {
            loginBtn.textContent = getAuthTranslation('profile');
            loginBtn.onclick = function() {
                window.location.href = 'profile.html';
            };
        } else {
            loginBtn.textContent = getAuthTranslation('signin');
            loginBtn.onclick = function() {
                openLoginModal();
            };
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–∫–æ–≤ –∏ —É—Ä–æ–≤–Ω—è
    updatePointsDisplay();
    if (window.levelSystem) {
        window.levelSystem.updateLevelDisplay();
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function checkAuthState() {
    const isLoggedIn = localStorage.getItem(AUTH_KEY) === 'true';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
    if (!window.levelSystem) {
        window.levelSystem = levelSystem;
        window.levelSystem.init();
    }
    
    updateNavigation();
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞
function openLoginModal() {
    const modal = document.getElementById('loginModal');
    if (modal) {
        modal.classList.remove('hidden');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeLoginModal() {
    const modal = document.getElementById('loginModal');
    if (modal) {
        modal.classList.add('hidden');
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
function loginUser() {
    localStorage.setItem(AUTH_KEY, 'true');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    if (!localStorage.getItem('userPoints')) {
        localStorage.setItem('userPoints', '0');
    }
    if (!localStorage.getItem('userActivities')) {
        localStorage.setItem('userActivities', '[]');
    }
    if (!localStorage.getItem('userAchievements')) {
        localStorage.setItem('userAchievements', '{}');
    }
    if (!localStorage.getItem('userName')) {
        const email = document.querySelector('#loginForm input[type="email"]')?.value || 'user';
        localStorage.setItem('userName', email.split('@')[0]);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
    if (window.levelSystem) {
        window.levelSystem.init();
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
    if (window.showNotification) {
        window.showNotification(getAuthTranslation('welcome'), 'success');
    }
    
    updateNavigation();
    closeLoginModal();
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
function logoutUser() {
    localStorage.setItem(AUTH_KEY, 'false');
    if (window.showNotification) {
        window.showNotification(getAuthTranslation('logout_success'), 'info');
    }
    updateNavigation();
    setTimeout(() => {
        window.location.href = 'index.html';
    }, 1000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
function addPoints(action, description) {
    if (!window.levelSystem) {
        // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
        const pointValues = {
            'REPORT_ISSUE': 25,
            'VERIFY_ISSUE': 15,
            'RESOLVE_ISSUE': 25,
            'ATTEND_EVENT': 50,
            'COMMUNITY_HELP': 20,
            'VERIFY_ACTION': 30,
            'SHARE_ACHIEVEMENT': 10,
            'COMPLETE_CHALLENGE': 25,
            'PLANT_TREE': 100
        };

        const points = pointValues[action] || 10;
        let userPoints = parseInt(localStorage.getItem('userPoints') || '0');
        userPoints += points;
        localStorage.setItem('userPoints', userPoints.toString());
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        const activities = JSON.parse(localStorage.getItem('userActivities') || '[]');
        activities.unshift({
            action: action,
            description: description,
            points: points,
            timestamp: new Date().toISOString()
        });
        localStorage.setItem('userActivities', JSON.stringify(activities));
        
        updatePointsDisplay();
        if (window.showNotification) {
            window.showNotification(`+${points} points! ${description}`, 'success');
        }
        return points;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—á–∫–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
    const pointValues = {
        'REPORT_ISSUE': 25,
        'VERIFY_ISSUE': 15,
        'RESOLVE_ISSUE': 25,
        'ATTEND_EVENT': 50,
        'COMMUNITY_HELP': 20,
        'VERIFY_ACTION': 30,
        'SHARE_ACHIEVEMENT': 10,
        'COMPLETE_CHALLENGE': 25,
        'PLANT_TREE': 100,
        'SOCIAL_LOGIN': 50
    };

    const points = pointValues[action] || 10;
    return window.levelSystem.addPoints(points, action, description);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
function signInWithGoogle() {
    if (window.showNotification) {
        window.showNotification(getAuthTranslation('google_login'), 'info');
    }
    
    setTimeout(() => {
        localStorage.setItem(AUTH_KEY, 'true');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!localStorage.getItem('userPoints')) {
            localStorage.setItem('userPoints', '50'); // –ë–æ–Ω—É—Å –∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥
        }
        if (!localStorage.getItem('userActivities')) {
            localStorage.setItem('userActivities', '[]');
        }
        if (!localStorage.getItem('userAchievements')) {
            localStorage.setItem('userAchievements', '{}');
        }
        if (!localStorage.getItem('userName')) {
            localStorage.setItem('userName', 'Google User');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
        if (window.levelSystem) {
            window.levelSystem.init();
            window.levelSystem.addPoints(50, 'SOCIAL_LOGIN', getAuthTranslation('welcome_bonus'));
        }
        
        updateNavigation();
        closeLoginModal();
        
        if (window.showNotification) {
            window.showNotification(getAuthTranslation('login_success') + ' +50 ' + getAuthTranslation('welcome_bonus'), 'success');
        }
    }, 1500);
}

function signInWithFacebook() {
    if (window.showNotification) {
        window.showNotification(getAuthTranslation('facebook_login'), 'info');
    }
    
    setTimeout(() => {
        localStorage.setItem(AUTH_KEY, 'true');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!localStorage.getItem('userPoints')) {
            localStorage.setItem('userPoints', '50'); // –ë–æ–Ω—É—Å –∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥
        }
        if (!localStorage.getItem('userActivities')) {
            localStorage.setItem('userActivities', '[]');
        }
        if (!localStorage.getItem('userAchievements')) {
            localStorage.setItem('userAchievements', '{}');
        }
        if (!localStorage.getItem('userName')) {
            localStorage.setItem('userName', 'Facebook User');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
        if (window.levelSystem) {
            window.levelSystem.init();
            window.levelSystem.addPoints(50, 'SOCIAL_LOGIN', getAuthTranslation('welcome_bonus'));
        }
        
        updateNavigation();
        closeLoginModal();
        
        if (window.showNotification) {
            window.showNotification(getAuthTranslation('login_success') + ' +50 ' + getAuthTranslation('welcome_bonus'), 'success');
        }
    }, 1500);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–∫–æ–≤
function updatePointsDisplay() {
    const pointsElements = document.querySelectorAll('#user-points span, #points-count');
    const userPoints = parseInt(localStorage.getItem('userPoints') || '0');
    
    pointsElements.forEach(element => {
        if (element.id === 'points-count' || element.parentElement.id === 'user-points') {
            element.textContent = userPoints;
        }
    });
}

// PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
function initializePWA() {
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    const manifest = {
        "name": "EcoYard - Environmental Platform",
        "short_name": "EcoYard",
        "start_url": "/",
        "display": "standalone",
        "theme_color": "#16a34a",
        "background_color": "#ffffff",
        "icons": [
            {
                "src": "https://github.com/justsummon/ecomap/blob/main/EcoYardlogo.png?raw=true",
                "sizes": "192x192",
                "type": "image/png"
            }
        ]
    };

    const manifestElement = document.createElement('link');
    manifestElement.rel = 'manifest';
    manifestElement.href = 'data:application/manifest+json,' + encodeURIComponent(JSON.stringify(manifest));
    document.head.appendChild(manifestElement);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                console.log('SW registered: ', registration);
            })
            .catch(registrationError => {
                console.log('SW registration failed: ', registrationError);
            });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document.addEventListener('DOMContentLoaded', function() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            loginUser();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeBtn = document.querySelector('.close');
    if (closeBtn) {
        closeBtn.addEventListener('click', closeLoginModal);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', function(e) {
        const modal = document.getElementById('loginModal');
        if (e.target === modal) {
            closeLoginModal();
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
    initializePWA();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkAuthState();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateAuthButtonText();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
window.levelSystem = levelSystem;
window.showNotification = showNotification;
window.addPoints = addPoints;
window.loginUser = loginUser;
window.logoutUser = logoutUser;
window.signInWithGoogle = signInWithGoogle;
window.signInWithFacebook = signInWithFacebook;
window.updateAuthButtonText = updateAuthButtonText;
window.checkAuthState = checkAuthState;
window.updateNavigation = updateNavigation;
